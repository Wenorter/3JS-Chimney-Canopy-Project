import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/detector/web/detector.js
var require_detector = __commonJS({
  "node_modules/detector/web/detector.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var NA_VERSION = "-1";
    var NA = {
      name: "na",
      version: NA_VERSION
    };
    function typeOf(type) {
      return function(object) {
        return Object.prototype.toString.call(object) === "[object " + type + "]";
      };
    }
    var isString = typeOf("String");
    var isRegExp = typeOf("RegExp");
    var isObject = typeOf("Object");
    var isFunction = typeOf("Function");
    function each(object, factory) {
      for (var i = 0, l = object.length; i < l; i++) {
        if (factory.call(object, object[i], i) === false) {
          break;
        }
      }
    }
    function detect(name, expression, ua) {
      var expr = isFunction(expression) ? expression.call(null, ua) : expression;
      if (!expr) {
        return null;
      }
      var info = {
        name,
        version: NA_VERSION,
        codename: ""
      };
      if (expr === true) {
        return info;
      } else if (isString(expr)) {
        if (ua.indexOf(expr) !== -1) {
          return info;
        }
      } else if (isObject(expr)) {
        if (expr.hasOwnProperty("version")) {
          info.version = expr.version;
        }
        return info;
      } else if (isRegExp(expr)) {
        var m = expr.exec(ua);
        if (m) {
          if (m.length >= 2 && m[1]) {
            info.version = m[1].replace(/_/g, ".");
          } else {
            info.version = NA_VERSION;
          }
          return info;
        }
      }
    }
    function init(ua, patterns, factory, detector) {
      var detected = NA;
      each(patterns, function(pattern) {
        var d = detect(pattern[0], pattern[1], ua);
        if (d) {
          detected = d;
          return false;
        }
      });
      factory.call(detector, detected.name, detected.version);
    }
    var Detector = function() {
      function Detector2(rules) {
        _classCallCheck(this, Detector2);
        this._rules = rules;
      }
      _createClass(Detector2, [{
        key: "parse",
        value: function parse(ua) {
          ua = (ua || "").toLowerCase();
          var d = {};
          init(ua, this._rules.device, function(name, version) {
            var v = parseFloat(version);
            d.device = {
              name,
              version: v,
              fullVersion: version
            };
            d.device[name] = v;
          }, d);
          init(ua, this._rules.os, function(name, version) {
            var v = parseFloat(version);
            d.os = {
              name,
              version: v,
              fullVersion: version
            };
            d.os[name] = v;
          }, d);
          var ieCore = this.IEMode(ua);
          init(ua, this._rules.engine, function(name, version) {
            var mode = version;
            if (ieCore) {
              version = ieCore.engineVersion || ieCore.engineMode;
              mode = ieCore.engineMode;
            }
            var v = parseFloat(version);
            d.engine = {
              name,
              version: v,
              fullVersion: version,
              mode: parseFloat(mode),
              fullMode: mode,
              compatible: ieCore ? ieCore.compatible : false
            };
            d.engine[name] = v;
          }, d);
          init(ua, this._rules.browser, function(name, version) {
            var mode = version;
            if (ieCore) {
              if (name === "ie") {
                version = ieCore.browserVersion;
              }
              mode = ieCore.browserMode;
            }
            var v = parseFloat(version);
            d.browser = {
              name,
              version: v,
              fullVersion: version,
              mode: parseFloat(mode),
              fullMode: mode,
              compatible: ieCore ? ieCore.compatible : false
            };
            d.browser[name] = v;
          }, d);
          return d;
        }
        // 解析使用 Trident 内核的浏览器的 `浏览器模式` 和 `文档模式` 信息。
        // @param {String} ua, userAgent string.
        // @return {Object}
      }, {
        key: "IEMode",
        value: function IEMode(ua) {
          if (!this._rules.re_msie.test(ua)) {
            return null;
          }
          var m = void 0;
          var engineMode = void 0;
          var engineVersion = void 0;
          var browserMode = void 0;
          var browserVersion = void 0;
          if (ua.indexOf("trident/") !== -1) {
            m = /\btrident\/([0-9.]+)/.exec(ua);
            if (m && m.length >= 2) {
              engineVersion = m[1];
              var v_version = m[1].split(".");
              v_version[0] = parseInt(v_version[0], 10) + 4;
              browserVersion = v_version.join(".");
            }
          }
          m = this._rules.re_msie.exec(ua);
          browserMode = m[1];
          var v_mode = m[1].split(".");
          if (typeof browserVersion === "undefined") {
            browserVersion = browserMode;
          }
          v_mode[0] = parseInt(v_mode[0], 10) - 4;
          engineMode = v_mode.join(".");
          if (typeof engineVersion === "undefined") {
            engineVersion = engineMode;
          }
          return {
            browserVersion,
            browserMode,
            engineVersion,
            engineMode,
            compatible: engineVersion !== engineMode
          };
        }
      }]);
      return Detector2;
    }();
    module.exports = Detector;
  }
});

// node_modules/detector/web/web-rules.js
var require_web_rules = __commonJS({
  "node_modules/detector/web/web-rules.js"(exports, module) {
    "use strict";
    var win = typeof window === "undefined" ? global : window;
    var external = win.external;
    var re_msie = /\b(?:msie |ie |trident\/[0-9].*rv[ :])([0-9.]+)/;
    var re_blackberry_10 = /\bbb10\b.+?\bversion\/([\d.]+)/;
    var re_blackberry_6_7 = /\bblackberry\b.+\bversion\/([\d.]+)/;
    var re_blackberry_4_5 = /\bblackberry\d+\/([\d.]+)/;
    var NA_VERSION = "-1";
    var DEVICES = [
      ["nokia", function(ua) {
        if (ua.indexOf("nokia ") !== -1) {
          return /\bnokia ([0-9]+)?/;
        } else {
          return /\bnokia([a-z0-9]+)?/;
        }
      }],
      // 三星有 Android 和 WP 设备。
      ["samsung", function(ua) {
        if (ua.indexOf("samsung") !== -1) {
          return /\bsamsung(?:[ \-](?:sgh|gt|sm))?-([a-z0-9]+)/;
        } else {
          return /\b(?:sgh|sch|gt|sm)-([a-z0-9]+)/;
        }
      }],
      ["wp", function(ua) {
        return ua.indexOf("windows phone ") !== -1 || ua.indexOf("xblwp") !== -1 || ua.indexOf("zunewp") !== -1 || ua.indexOf("windows ce") !== -1;
      }],
      ["pc", "windows"],
      ["ipad", "ipad"],
      // ipod 规则应置于 iphone 之前。
      ["ipod", "ipod"],
      ["iphone", /\biphone\b|\biph(\d)/],
      ["mac", "macintosh"],
      // 小米
      ["mi", /\bmi[ \-]?([a-z0-9 ]+(?= build|\)))/],
      // 红米
      ["hongmi", /\bhm[ \-]?([a-z0-9]+)/],
      ["aliyun", /\baliyunos\b(?:[\-](\d+))?/],
      ["meizu", function(ua) {
        return ua.indexOf("meizu") >= 0 ? /\bmeizu[\/ ]([a-z0-9]+)\b/ : /\bm([0-9cx]{1,4})\b/;
      }],
      ["nexus", /\bnexus ([0-9s.]+)/],
      ["huawei", function(ua) {
        var re_mediapad = /\bmediapad (.+?)(?= build\/huaweimediapad\b)/;
        if (ua.indexOf("huawei-huawei") !== -1) {
          return /\bhuawei\-huawei\-([a-z0-9\-]+)/;
        } else if (re_mediapad.test(ua)) {
          return re_mediapad;
        } else {
          return /\bhuawei[ _\-]?([a-z0-9]+)/;
        }
      }],
      ["lenovo", function(ua) {
        if (ua.indexOf("lenovo-lenovo") !== -1) {
          return /\blenovo\-lenovo[ \-]([a-z0-9]+)/;
        } else {
          return /\blenovo[ \-]?([a-z0-9]+)/;
        }
      }],
      // 中兴
      ["zte", function(ua) {
        if (/\bzte\-[tu]/.test(ua)) {
          return /\bzte-[tu][ _\-]?([a-su-z0-9\+]+)/;
        } else {
          return /\bzte[ _\-]?([a-su-z0-9\+]+)/;
        }
      }],
      // 步步高
      ["vivo", /\bvivo(?: ([a-z0-9]+))?/],
      ["htc", function(ua) {
        if (/\bhtc[a-z0-9 _\-]+(?= build\b)/.test(ua)) {
          return /\bhtc[ _\-]?([a-z0-9 ]+(?= build))/;
        } else {
          return /\bhtc[ _\-]?([a-z0-9 ]+)/;
        }
      }],
      ["oppo", /\boppo[_]([a-z0-9]+)/],
      ["konka", /\bkonka[_\-]([a-z0-9]+)/],
      ["sonyericsson", /\bmt([a-z0-9]+)/],
      ["coolpad", /\bcoolpad[_ ]?([a-z0-9]+)/],
      ["lg", /\blg[\-]([a-z0-9]+)/],
      ["android", /\bandroid\b|\badr\b/],
      ["blackberry", function(ua) {
        if (ua.indexOf("blackberry") >= 0) {
          return /\bblackberry\s?(\d+)/;
        }
        return "bb10";
      }]
    ];
    var OS = [["wp", function(ua) {
      if (ua.indexOf("windows phone ") !== -1) {
        return /\bwindows phone (?:os )?([0-9.]+)/;
      } else if (ua.indexOf("xblwp") !== -1) {
        return /\bxblwp([0-9.]+)/;
      } else if (ua.indexOf("zunewp") !== -1) {
        return /\bzunewp([0-9.]+)/;
      }
      return "windows phone";
    }], ["windows", /\bwindows nt ([0-9.]+)/], ["macosx", /\bmac os x ([0-9._]+)/], ["ios", function(ua) {
      if (/\bcpu(?: iphone)? os /.test(ua)) {
        return /\bcpu(?: iphone)? os ([0-9._]+)/;
      } else if (ua.indexOf("iph os ") !== -1) {
        return /\biph os ([0-9_]+)/;
      } else {
        return /\bios\b/;
      }
    }], ["yunos", /\baliyunos ([0-9.]+)/], ["android", function(ua) {
      if (ua.indexOf("android") >= 0) {
        return /\bandroid[ \/-]?([0-9.x]+)?/;
      } else if (ua.indexOf("adr") >= 0) {
        if (ua.indexOf("mqqbrowser") >= 0) {
          return /\badr[ ]\(linux; u; ([0-9.]+)?/;
        } else {
          return /\badr(?:[ ]([0-9.]+))?/;
        }
      }
      return "android";
    }], ["chromeos", /\bcros i686 ([0-9.]+)/], ["linux", "linux"], ["windowsce", /\bwindows ce(?: ([0-9.]+))?/], ["symbian", /\bsymbian(?:os)?\/([0-9.]+)/], ["blackberry", function(ua) {
      var m = ua.match(re_blackberry_10) || ua.match(re_blackberry_6_7) || ua.match(re_blackberry_4_5);
      return m ? { version: m[1] } : "blackberry";
    }]];
    function checkTW360External(key) {
      if (!external) {
        return;
      }
      try {
        var runpath = external.twGetRunPath.toLowerCase();
        var security = external.twGetSecurityID(win);
        var version = external.twGetVersion(security);
        if (runpath && runpath.indexOf(key) === -1) {
          return false;
        }
        if (version) {
          return { version };
        }
      } catch (ex) {
      }
    }
    var ENGINE = [["edgehtml", /edge\/([0-9.]+)/], ["trident", re_msie], ["blink", function() {
      return "chrome" in win && "CSS" in win && /\bapplewebkit[\/]?([0-9.+]+)/;
    }], ["webkit", /\bapplewebkit[\/]?([0-9.+]+)/], ["gecko", function(ua) {
      var match = ua.match(/\brv:([\d\w.]+).*\bgecko\/(\d+)/);
      if (match) {
        return {
          version: match[1] + "." + match[2]
        };
      }
    }], ["presto", /\bpresto\/([0-9.]+)/], ["androidwebkit", /\bandroidwebkit\/([0-9.]+)/], ["coolpadwebkit", /\bcoolpadwebkit\/([0-9.]+)/], ["u2", /\bu2\/([0-9.]+)/], ["u3", /\bu3\/([0-9.]+)/]];
    var BROWSER = [
      // Microsoft Edge Browser, Default browser in Windows 10.
      ["edge", /edge\/([0-9.]+)/],
      // Sogou.
      ["sogou", function(ua) {
        if (ua.indexOf("sogoumobilebrowser") >= 0) {
          return /sogoumobilebrowser\/([0-9.]+)/;
        } else if (ua.indexOf("sogoumse") >= 0) {
          return true;
        }
        return / se ([0-9.x]+)/;
      }],
      // TheWorld (世界之窗)
      // 由于裙带关系，TheWorld API 与 360 高度重合。
      // 只能通过 UA 和程序安装路径中的应用程序名来区分。
      // TheWorld 的 UA 比 360 更靠谱，所有将 TheWorld 的规则放置到 360 之前。
      ["theworld", function() {
        var x = checkTW360External("theworld");
        if (typeof x !== "undefined") {
          return x;
        }
        return /theworld(?: ([\d.])+)?/;
      }],
      // 360SE, 360EE.
      ["360", function(ua) {
        var x = checkTW360External("360se");
        if (typeof x !== "undefined") {
          return x;
        }
        if (ua.indexOf("360 aphone browser") !== -1) {
          return /\b360 aphone browser \(([^\)]+)\)/;
        }
        return /\b360(?:se|ee|chrome|browser)\b/;
      }],
      // Maxthon
      ["maxthon", function() {
        try {
          if (external && (external.mxVersion || external.max_version)) {
            return {
              version: external.mxVersion || external.max_version
            };
          }
        } catch (ex) {
        }
        return /\b(?:maxthon|mxbrowser)(?:[ \/]([0-9.]+))?/;
      }],
      ["micromessenger", /\bmicromessenger\/([\d.]+)/],
      ["qq", /\bm?qqbrowser\/([0-9.]+)/],
      ["green", "greenbrowser"],
      ["tt", /\btencenttraveler ([0-9.]+)/],
      ["liebao", function(ua) {
        if (ua.indexOf("liebaofast") >= 0) {
          return /\bliebaofast\/([0-9.]+)/;
        }
        if (ua.indexOf("lbbrowser") === -1) {
          return false;
        }
        var version = void 0;
        try {
          if (external && external.LiebaoGetVersion) {
            version = external.LiebaoGetVersion();
          }
        } catch (ex) {
        }
        return {
          version: version || NA_VERSION
        };
      }],
      ["tao", /\btaobrowser\/([0-9.]+)/],
      ["coolnovo", /\bcoolnovo\/([0-9.]+)/],
      ["saayaa", "saayaa"],
      // 有基于 Chromniun 的急速模式和基于 IE 的兼容模式。必须在 IE 的规则之前。
      ["baidu", /\b(?:ba?idubrowser|baiduhd)[ \/]([0-9.x]+)/],
      // 后面会做修复版本号，这里只要能识别是 IE 即可。
      ["ie", re_msie],
      ["mi", /\bmiuibrowser\/([0-9.]+)/],
      // Opera 15 之后开始使用 Chromniun 内核，需要放在 Chrome 的规则之前。
      ["opera", function(ua) {
        var re_opera_old = /\bopera.+version\/([0-9.ab]+)/;
        var re_opera_new = /\bopr\/([0-9.]+)/;
        return re_opera_old.test(ua) ? re_opera_old : re_opera_new;
      }],
      ["oupeng", /\boupeng\/([0-9.]+)/],
      ["yandex", /yabrowser\/([0-9.]+)/],
      // 支付宝手机客户端
      ["ali-ap", function(ua) {
        if (ua.indexOf("aliapp") > 0) {
          return /\baliapp\(ap\/([0-9.]+)\)/;
        } else {
          return /\balipayclient\/([0-9.]+)\b/;
        }
      }],
      // 支付宝平板客户端
      ["ali-ap-pd", /\baliapp\(ap-pd\/([0-9.]+)\)/],
      // 支付宝商户客户端
      ["ali-am", /\baliapp\(am\/([0-9.]+)\)/],
      // 淘宝手机客户端
      ["ali-tb", /\baliapp\(tb\/([0-9.]+)\)/],
      // 淘宝平板客户端
      ["ali-tb-pd", /\baliapp\(tb-pd\/([0-9.]+)\)/],
      // 天猫手机客户端
      ["ali-tm", /\baliapp\(tm\/([0-9.]+)\)/],
      // 天猫平板客户端
      ["ali-tm-pd", /\baliapp\(tm-pd\/([0-9.]+)\)/],
      // UC 浏览器，可能会被识别为 Android 浏览器，规则需要前置。
      // UC 桌面版浏览器携带 Chrome 信息，需要放在 Chrome 之前。
      ["uc", function(ua) {
        if (ua.indexOf("ucbrowser/") >= 0) {
          return /\bucbrowser\/([0-9.]+)/;
        } else if (ua.indexOf("ubrowser/") >= 0) {
          return /\bubrowser\/([0-9.]+)/;
        } else if (/\buc\/[0-9]/.test(ua)) {
          return /\buc\/([0-9.]+)/;
        } else if (ua.indexOf("ucweb") >= 0) {
          return /\bucweb([0-9.]+)?/;
        } else {
          return /\b(?:ucbrowser|uc)\b/;
        }
      }],
      ["chrome", / (?:chrome|crios|crmo)\/([0-9.]+)/],
      // Android 默认浏览器。该规则需要在 safari 之前。
      ["android", function(ua) {
        if (ua.indexOf("android") === -1) {
          return;
        }
        return /\bversion\/([0-9.]+(?: beta)?)/;
      }],
      ["blackberry", function(ua) {
        var m = ua.match(re_blackberry_10) || ua.match(re_blackberry_6_7) || ua.match(re_blackberry_4_5);
        return m ? { version: m[1] } : "blackberry";
      }],
      ["safari", /\bversion\/([0-9.]+(?: beta)?)(?: mobile(?:\/[a-z0-9]+)?)? safari\//],
      // 如果不能被识别为 Safari，则猜测是 WebView。
      ["webview", /\bcpu(?: iphone)? os (?:[0-9._]+).+\bapplewebkit\b/],
      ["firefox", /\bfirefox\/([0-9.ab]+)/],
      ["nokia", /\bnokiabrowser\/([0-9.]+)/]
    ];
    module.exports = {
      device: DEVICES,
      os: OS,
      browser: BROWSER,
      engine: ENGINE,
      re_msie
    };
  }
});

// node_modules/detector/web/web-detector.js
var require_web_detector = __commonJS({
  "node_modules/detector/web/web-detector.js"(exports, module) {
    var Detector = require_detector();
    var WebRules = require_web_rules();
    var userAgent = navigator.userAgent || "";
    var appVersion = navigator.appVersion || "";
    var vendor = navigator.vendor || "";
    var ua = userAgent + " " + appVersion + " " + vendor;
    var detector = new Detector(WebRules);
    function IEMode(ua2) {
      if (!WebRules.re_msie.test(ua2)) {
        return null;
      }
      var m = void 0;
      var engineMode = void 0;
      var engineVersion = void 0;
      var browserMode = void 0;
      var browserVersion = void 0;
      if (ua2.indexOf("trident/") !== -1) {
        m = /\btrident\/([0-9.]+)/.exec(ua2);
        if (m && m.length >= 2) {
          engineVersion = m[1];
          var v_version = m[1].split(".");
          v_version[0] = parseInt(v_version[0], 10) + 4;
          browserVersion = v_version.join(".");
        }
      }
      m = WebRules.re_msie.exec(ua2);
      browserMode = m[1];
      var v_mode = m[1].split(".");
      if (typeof browserVersion === "undefined") {
        browserVersion = browserMode;
      }
      v_mode[0] = parseInt(v_mode[0], 10) - 4;
      engineMode = v_mode.join(".");
      if (typeof engineVersion === "undefined") {
        engineVersion = engineMode;
      }
      return {
        browserVersion,
        browserMode,
        engineVersion,
        engineMode,
        compatible: engineVersion !== engineMode
      };
    }
    function WebParse(ua2) {
      var d = detector.parse(ua2);
      var ieCore = IEMode(ua2);
      if (ieCore) {
        var engineName = d.engine.name;
        var engineVersion = ieCore.engineVersion || ieCore.engineMode;
        var ve = parseFloat(engineVersion);
        var engineMode = ieCore.engineMode;
        d.engine = {
          name: engineName,
          version: ve,
          fullVersion: engineVersion,
          mode: parseFloat(engineMode),
          fullMode: engineMode,
          compatible: ieCore ? ieCore.compatible : false
        };
        d.engine[d.engine.name] = ve;
        var browserName = d.browser.name;
        var browserVersion = d.browser.fullVersion;
        if (browserName === "ie") {
          browserVersion = ieCore.browserVersion;
        }
        var browserMode = ieCore.browserMode;
        var vb = parseFloat(browserVersion);
        d.browser = {
          name: browserName,
          version: vb,
          fullVersion: browserVersion,
          mode: parseFloat(browserMode),
          fullMode: browserMode,
          compatible: ieCore ? ieCore.compatible : false
        };
        d.browser[browserName] = vb;
      }
      return d;
    }
    var Tan = WebParse(ua);
    Tan.parse = WebParse;
    module.exports = Tan;
  }
});
export default require_web_detector();
//# sourceMappingURL=detector.js.map
